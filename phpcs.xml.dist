<?xml version="1.0"?>
<ruleset name="PHPFacile">
    <description>The coding standard for PHP Facile! libs</description>

    <!--
      usefull links:
        https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties
    -->

    <file>autoload.php</file>
    <file>bin</file>
    <file>scripts</file>
    <file>src</file>
    <file>tests</file>

    <!--exclude-pattern>*/Standards/*/Tests/*\.(inc|css|js)</exclude-pattern-->

    <arg name="basepath" value="."/>
    <arg name="colors" />
    <arg name="parallel" value="75" />
    <arg value="np"/>

    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PEAR standard -->
    <rule ref="PEAR">
        <exclude name="PEAR.NamingConventions.ValidFunctionName" />
        <exclude name="PEAR.NamingConventions.ValidVariableName" />
        <exclude name="PEAR.Commenting.ClassComment" />
        <exclude name="PEAR.Commenting.FileComment.Missing" /> <!-- confirmed -->
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingPackageTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingVersion" />
        <exclude name="PEAR.Commenting.InlineComment" />
        <exclude name="PEAR.WhiteSpace.ScopeIndent" /> <!-- confirmed. Use Generic.WhiteSpace.ScopeIndent instead because of switch/case PEAR style -->
        <!-- exclude name="PEAR.WhiteSpace.ObjectOperatorIndent" /--> <!-- don't like this rule... but is there an alternative to get arrows aligned ? -->
    </rule>

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />
    <rule ref="Squiz.Arrays.ArrayDeclaration" /> <!-- confirmed: NoComma -->
    <!-- rule ref="Squiz.Commenting.ClosingDeclarationComment" /--> <!-- exclusion confirmed -->
    <rule ref="Squiz.ControlStructures.ControlSignature" />
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration" />
    <rule ref="Squiz.Commenting.BlockComment" />
    <rule ref="Squiz.Commenting.DocCommentAlignment" />
    <rule ref="Squiz.Commenting.EmptyCatchComment" />

    <!--
       Squiz.Commenting.InlineComment
         Following is OK according to this rule:
         // Inline comment ends with a dot.
         // Inline comment ends with a question mark?
         // Inline comment ends with an exclamation mark!
         $var = 123;

       Following is NOT OK

       Squiz.Commenting.InlineComment.InvalidEndChar
         // Inline comment has invalid end char (no dot, nor question or exclamation mark)

       Squiz.Commenting.InlineComment.NoSpaceBefore
         //Inline comment with no space between 2 slashes and text

       Squiz.Commenting.InlineComment.NotCapital
         // inline comment not starting with a capital.
    -->
    <rule ref="Squiz.Commenting.InlineComment">
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
        <exclude name="Squiz.Commenting.InlineComment.NotCapital" />
    </rule>

    <!-- rule ref="Squiz.Commenting.LongConditionClosingComment" /--> <!-- exclusion confirmed -->

    <!--
       Squiz.Commenting.PostStatementComment

       Following is NOT OK

       Squiz.Commenting.PostStatementComment.Found
          $language = 'PHP'; // This comment should be placed on top of the code line
    -->
    <rule ref="Squiz.Commenting.PostStatementComment" />

    <rule ref="Squiz.Commenting.VariableComment" />
    <rule ref="Squiz.Formatting.OperatorBracket" />
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing" /> <!-- confirmed with customized parameters Cf. below -->
    <rule ref="Squiz.Operators.ComparisonOperatorUsage" /> <!-- confirmed: NotAllowed -->
    <rule ref="Squiz.PHP.DisallowInlineIf" />
    <rule ref="Squiz.Scope.MethodScope" />
    <rule ref="Squiz.Strings.ConcatenationSpacing" />

    <!--
        Squiz.WhiteSpace.ControlStructureSpacing
            Following is OK according to this rule:
            if ('PHP' === $language) {

            }

            $year = 2018;

        Following is NOT OK

        Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose
            if ('PHP' === $language) {

            }
            $year = 2018;
    -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />

    <!--rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace" /--> <!-- exclusion confirmed -->
    <!--rule ref="Squiz.WhiteSpace.FunctionSpacing" /--> <!-- ?? -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" /> <!-- confirmed -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/> <!-- confirmed -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent" />
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/> <!-- confirmed -->
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- PEAR uses warnings for inline control structures, so switch back to errors -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>

     <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>

    <!-- PSR-2 code sample like (but not clearly a PSR-2 rule) -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/> <!-- confirmed -->
        </properties>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName" />
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <!-- Have 12 chars padding maximum and always show as errors -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="12"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- Ban some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
            </property>
        </properties>
    </rule>

    <!-- Private methods MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- Private properties MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- The testing bootstrap file uses string concats to stop IDEs seeing the class aliases -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <exclude-pattern>tests/bootstrap.php</exclude-pattern>
    </rule>

</ruleset>
